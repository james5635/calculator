#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Build
on:
  push:               # Run on push
    branches: [ "qt5" ]
  pull_request:       # Run on pull-request
    branches: [ "qt5" ]

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "0.0.2"
  EXECUTABLE: "calculator"
  APPLICATION: "calculator-app"
  QMAKE_PROJECT: "calculator.pro"
  QML_DIR_NIX: "assets/qml"
  QML_DIR_WIN: "assets\\qml"

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:
  #
  # GNU/Linux build (we run on Ubuntu 16.04 to generate AppImage)
  #
  build-linux:
    runs-on: ubuntu-20.04
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with: 
          version: '5.15.2'
          
      #
      # Install additional dependencies, stolen from:
      # https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml
      #
      - name: Install dependencies
        run: |
             sudo apt-get update
             sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev 
             sudo apt install build-essential xz-utils tar wget libglib2.0-0 libfuse-dev libdbus-1-dev libxcb-shape0 libfontconfig
        
      #
      # Compile the application
      #
      - name: Compile
        run: |
             mkdir -p build
             cd build
             qmake ../calculator.pro
             make
             
      #
      # Create the bundle
      #
      - name: Create bundle
        run: | 
             cd build
             wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
             chmod +x linuxdeployqt-continuous-x86_64.AppImage
             mkdir x
             cd x
             mv ../calculator .
             cat << EOF > default.desktop
             [Desktop Entry]
             Type=Application
             Name=calculator
             Exec=calculator %F
             Icon=default
             Comment=Edit this default file
             Terminal=true
             Categories=Utility;
             EOF
             touch default.png
             ../linuxdeployqt-continuous-x86_64.AppImage ./default.desktop -appimage
             
     
      #
      # Rename to match "%AppName%-%Version%-Linux.AppImage" format
      #
      - name: Rename 
        run: sudo mv ./build/x/*.AppImage ./build/x/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
        
      #
      # Upload bundle to build artifacts
      #
      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
          path: ./build/x/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
             
  # #
  # # macOS build
  # #
  build-mac:
    runs-on: macos-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@4
        with: 
          version: '5.15.2'
      
      #
      # Compile application
      #
      - name: Compile
        run: |
             qmake ${{env.QMAKE_PROJECT}} CONFIG+=release
             make -j8
             
      #
      # Deploy application
      #
      - name: Deploy app
        run: |
             macdeployqt ${{env.EXECUTABLE}}.app -qmldir="${{env.QML_DIR_NIX}}"
             mv "${{env.EXECUTABLE}}.app" "${{env.APPLICATION}}.app"  
      
      #
      # ZIP application "%AppName%-%Version%-macOS.zip"
      # We use ditto instead of zip to use the same commands as Finder
      #
      - name: Create ZIP file
        run: |
             ditto -c -k --sequesterRsrc --keepParent "${{env.APPLICATION}}.app" ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
     
      #
      # Upload ZIP to build artifacts
      #
      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
          path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
          
  #
  # Windows build
  #
  build-windows:
    runs-on: windows-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      
      #
      # Configure MSVC
      #
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
          
      #
      # Install NSIS
      #  
      - name: Install NSIS
        run: |
             Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
             scoop bucket add extras
             scoop install nsis
 
      #
      # Compile application
      #
      - name: Compile
        run: |
             qmake ${{env.QMAKE_PROJECT}} CONFIG+=release
             nmake
             
      #
      # Copy Qt DLLs, compiler runtime & application icon
      #       
      - name: Deploy
        run: |
             mkdir bin
             move release/${{env.EXECUTABLE}}.exe bin
             windeployqt bin/${{env.EXECUTABLE}}.exe -qmldir="${{env.QML_DIR_WIN}}" --compiler-runtime
             mkdir "${{env.APPLICATION}}"
             move bin "${{env.APPLICATION}}"
             # xcopy deploy\windows\resources\icon.ico "${{env.APPLICATION}}"
      
      #
      # Create NSIS installer
      #
      - name: Make NSIS installer
        run: |
             New-Item -Path deploy\windows\nsis\ -ItemType Directory
             move "${{env.APPLICATION}}" deploy\windows\nsis\
             cd deploy\windows\nsis
             move ..\..\..\script\setup.nsi .\
             echo "before making nsis" 
             dir
             makensis /X"SetCompressor /FINAL lzma" setup.nsi
             echo "after making nsis"
             dir
             ren *.exe ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
             
      #
      # Upload installer to build artifacts
      #
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
          path: deploy/windows/nsis/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
          # path: deploy/windows/nsis/
